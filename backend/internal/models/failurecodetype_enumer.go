// Code generated by "enumer -type=FailureCodeType -json -text -sql -transform=snake -trimprefix=FailureCode -linecomment"; DO NOT EDIT.

package models

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _FailureCodeTypeName = "parse_requestnot_foundcreate_responseservice_failedcreate_userpayment_method_not_foundinvalid_partner_config"

var _FailureCodeTypeIndex = [...]uint8{0, 0, 13, 22, 37, 51, 62, 86, 108}

const _FailureCodeTypeLowerName = "parse_requestnot_foundcreate_responseservice_failedcreate_userpayment_method_not_foundinvalid_partner_config"

func (i FailureCodeType) String() string {
	if i < 0 || i >= FailureCodeType(len(_FailureCodeTypeIndex)-1) {
		return fmt.Sprintf("FailureCodeType(%d)", i)
	}
	return _FailureCodeTypeName[_FailureCodeTypeIndex[i]:_FailureCodeTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FailureCodeTypeNoOp() {
	var x [1]struct{}
	_ = x[FailureCodeNil-(0)]
	_ = x[FailureCodeParseRequest-(1)]
	_ = x[FailureCodeNotFound-(2)]
	_ = x[FailureCodeCreateResponse-(3)]
	_ = x[FailureCodeServiceFailed-(4)]
	_ = x[FailureCodeCreateUser-(5)]
	_ = x[FailureCodePaymentMethodNotFound-(6)]
	_ = x[FailureCodeInvalidPartnerConfig-(7)]
}

var _FailureCodeTypeValues = []FailureCodeType{FailureCodeNil, FailureCodeParseRequest, FailureCodeNotFound, FailureCodeCreateResponse, FailureCodeServiceFailed, FailureCodeCreateUser, FailureCodePaymentMethodNotFound, FailureCodeInvalidPartnerConfig}

var _FailureCodeTypeNameToValueMap = map[string]FailureCodeType{
	_FailureCodeTypeName[0:0]:         FailureCodeNil,
	_FailureCodeTypeLowerName[0:0]:    FailureCodeNil,
	_FailureCodeTypeName[0:13]:        FailureCodeParseRequest,
	_FailureCodeTypeLowerName[0:13]:   FailureCodeParseRequest,
	_FailureCodeTypeName[13:22]:       FailureCodeNotFound,
	_FailureCodeTypeLowerName[13:22]:  FailureCodeNotFound,
	_FailureCodeTypeName[22:37]:       FailureCodeCreateResponse,
	_FailureCodeTypeLowerName[22:37]:  FailureCodeCreateResponse,
	_FailureCodeTypeName[37:51]:       FailureCodeServiceFailed,
	_FailureCodeTypeLowerName[37:51]:  FailureCodeServiceFailed,
	_FailureCodeTypeName[51:62]:       FailureCodeCreateUser,
	_FailureCodeTypeLowerName[51:62]:  FailureCodeCreateUser,
	_FailureCodeTypeName[62:86]:       FailureCodePaymentMethodNotFound,
	_FailureCodeTypeLowerName[62:86]:  FailureCodePaymentMethodNotFound,
	_FailureCodeTypeName[86:108]:      FailureCodeInvalidPartnerConfig,
	_FailureCodeTypeLowerName[86:108]: FailureCodeInvalidPartnerConfig,
}

var _FailureCodeTypeNames = []string{
	_FailureCodeTypeName[0:0],
	_FailureCodeTypeName[0:13],
	_FailureCodeTypeName[13:22],
	_FailureCodeTypeName[22:37],
	_FailureCodeTypeName[37:51],
	_FailureCodeTypeName[51:62],
	_FailureCodeTypeName[62:86],
	_FailureCodeTypeName[86:108],
}

// FailureCodeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FailureCodeTypeString(s string) (FailureCodeType, error) {
	if val, ok := _FailureCodeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FailureCodeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FailureCodeType values", s)
}

// FailureCodeTypeValues returns all values of the enum
func FailureCodeTypeValues() []FailureCodeType {
	return _FailureCodeTypeValues
}

// FailureCodeTypeStrings returns a slice of all String values of the enum
func FailureCodeTypeStrings() []string {
	strs := make([]string, len(_FailureCodeTypeNames))
	copy(strs, _FailureCodeTypeNames)
	return strs
}

// IsAFailureCodeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FailureCodeType) IsAFailureCodeType() bool {
	for _, v := range _FailureCodeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FailureCodeType
func (i FailureCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FailureCodeType
func (i *FailureCodeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FailureCodeType should be a string, got %s", data)
	}

	var err error
	*i, err = FailureCodeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for FailureCodeType
func (i FailureCodeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for FailureCodeType
func (i *FailureCodeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = FailureCodeTypeString(string(text))
	return err
}

func (i FailureCodeType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *FailureCodeType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of FailureCodeType: %[1]T(%[1]v)", value)
	}

	val, err := FailureCodeTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
