// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	models "backend/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IAccountsService is an autogenerated mock type for the IAccountsService type
type IAccountsService struct {
	mock.Mock
}

// AddBalance provides a mock function with given fields: c, accountID, amount
func (_m *IAccountsService) AddBalance(c context.Context, accountID string, amount float64) (*models.Account, error) {
	ret := _m.Called(c, accountID, amount)

	if len(ret) == 0 {
		panic("no return value specified for AddBalance")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) (*models.Account, error)); ok {
		return rf(c, accountID, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *models.Account); ok {
		r0 = rf(c, accountID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64) error); ok {
		r1 = rf(c, accountID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: c, account
func (_m *IAccountsService) Create(c context.Context, account models.Account) (*models.Account, error) {
	ret := _m.Called(c, account)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Account) (*models.Account, error)); ok {
		return rf(c, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Account) *models.Account); ok {
		r0 = rf(c, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Account) error); ok {
		r1 = rf(c, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, accountID
func (_m *IAccountsService) GetByID(c context.Context, accountID string) (*models.Account, error) {
	ret := _m.Called(c, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Account, error)); ok {
		return rf(c, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Account); ok {
		r0 = rf(c, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubtractBalance provides a mock function with given fields: c, accountID, amount
func (_m *IAccountsService) SubtractBalance(c context.Context, accountID string, amount float64) (*models.Account, error) {
	ret := _m.Called(c, accountID, amount)

	if len(ret) == 0 {
		panic("no return value specified for SubtractBalance")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) (*models.Account, error)); ok {
		return rf(c, accountID, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *models.Account); ok {
		r0 = rf(c, accountID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64) error); ok {
		r1 = rf(c, accountID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAccountsService creates a new instance of IAccountsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAccountsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAccountsService {
	mock := &IAccountsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
